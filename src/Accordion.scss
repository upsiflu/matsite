@use 'Accordion/Region';

.Accordion {
    /* Cumulative measures */
    --west-width: calc(var(--west-units) * var(--unit));
    --east-width: calc(var(--east-units) * var(--unit));
    --north-height: calc(var(--north-units) * var(--unit));
    --south-height: calc(var(--south-units) * var(--unit));
    --info-height: calc(var(--north-infoLines) * var(--unit));

    --nearNorth-height: calc(var(--nearNorth-units) * var(--unit));
    --nearSouth-height: calc(var(--nearSouth-units) * var(--unit));



    /* What is the difference between 'center' and 'here'?
    'here' includes the 'peek' region, which is "behind" the 
    'center' region but has fixed, preset dimensions (see Layout.scss)
    */


    // `here` and `center` demensions depend on whether focus has body
    &.focusHasBody {
        --here-width: var(--center-width);
        --here-height: var(--center-height);
        --center-width: calc(var(--center-columns) * var(--column) + var(--center-screens) * var(--screen));
        --center-height: var(--fit-height);
    }

    &:not(.focusHasBody) {
        --here-width: max(var(--peek-width), var(--center-width));
        --here-height: max(var(--peek-height), var(--center-height));

        &.🪗🁣 {
            --center-height: calc(var(--unit) * var(--center-infoLines) + var(--unit));
            --center-width: var(--column);
        }

        &.🪗🀱 {
            --center-height: var(--column);
            --center-width: var(--unit);
        }
    }

    position:relative;
    height: var(--height);
    width: var(--width);

    /*---- focusIsBackground and not ----*/


    &.focusIsBackground {
        --here-height: var(--column);
        --x: 0;
        --y: calc(50vh - var(--column) / 2);
        --width: 100vw;
        --height: calc(100vh - var(--padding) * 2);

        /* Aisles are collapsed to their headers */
        --nearWest-width: calc(var(--nearWest-units) * var(--unit));
        --nearEast-width: calc(var(--nearEast-units) * var(--unit));


        left: 0;
    }

    &:not(.focusIsBackground) {
        --x: calc(50vw + var(--west-width) + var(--nearWest-width));
        --y: calc(50vh + var(--north-height) + var(--nearNorth-height));
        --width: calc(100vw + var(--west-width) + var(--nearWest-width) + var(--here-width) + var(--nearEast-width) + var(--east-width));
        --height: calc(100vh + var(--north-height) + var(--nearNorth-height) + var(--here-height) + var(--nearSouth-height) + var(--south-height));


        /* Aisles expand around horizontal focus */
        --nearWest-width: calc(var(--nearWest-headers) * var(--unit) + var(--nearWest-columns) * var(--column) + var(--nearWest-screens) * var(--screen));
        --nearEast-width: calc(var(--nearEast-headers) * var(--unit) + var(--nearEast-columns) * var(--column) + var(--nearEast-screens) * var(--screen));

    }

}




/* ================================================================================
*                                  Rectangles 
*/

/* closest-aisle.js makes sure margins correspond to the vector 
from the focus-pivot to the top left edge of the screen.
This means that #virtualScreen, if given a position that corresponds to the location of the .F-pivot relative to the Accordion,
accurately fills the viewport at the moment the focus has changed, and can consequently be used to hard-scroll onto the new .F */
#virtualScreen {
    background: yellowgreen;
    height: 100vh;
    width: 100vw;
    position: absolute;

    // left and top correspond to .F-pivot, on top of which the margins emulate scroll-offset
    left: calc(var(--x) + 1.5rem);
    top: calc(var(--y) + var(--center-height) * 0.4);
    transition: none;
}

/* The pivot is the point that selects the focus through scrolling. It's glued to the viewport. */
#pivot {
    position: fixed;
    top: 40vh;
    left: 3.5rem;
    border: 1rem solid transparent;
    border-left: 1rem solid orangered;

}


.screenBackground {
    width: 100vw;
    height: 100vh;
    outline: 1px dashed black;
    outline-offset: -1.5rem;
    pointer-events: none;
    position: absolute;
    left: calc(var(--west-width) + var(--nearWest-width, 0rem) + var(--here-width) / 2 - 50vw);
    top: calc(var(--north-height) + var(--nearWest-height, 0rem) - var(--info-height) / 2 + var(--here-height) / 2 - 50vh);
    pointer-events: none;
    background: transparent;
}

.aisleBackground {
    width: calc(var(--width) - var(--west-width) - var(--east-width));
    height: calc(var(--height) - var(--north-height) - var(--south-height) + var(--info-height));
    border: none;
    box-sizing: border-box;
    pointer-events: none;
    position: absolute;
    left: var(--west-width);
    top: calc(var(--north-height) - var(--info-height));
    background: transparent;
    z-index: 5;
}

.focusIsBackground>.screenBackground {
    left: 0px;
    top: calc(0px - var(--padding));
}


.Accordion {

    /* Mitigate list style */
    list-style: none;
    padding: 0;

    /* Allow absolute positioning */
    position: relative;

    /* Centering */
    margin: auto;
    top: var(--padding);
}

/* Article Layout */
.body {
    /* crop and provide scrollbars */
    max-height: var(--here-height);

    &:not(.illustrative) {
        overflow: auto;
    }

    &.waiting {
        background: grey;
    }
}



/*
===========================================================
*/
.hamburgerMenu,
.hamburgerMenu:link,
.hamburgerMenu:visited {
    position: fixed;
    top: 0;
    right: 0;
    color: white;
    z-index: 4;
    border-radius: 100%;
    padding: .75rem;
    width: 3rem;
    height: 3rem;
    background: rgba(0, 0, 0, .5);
    transition: all .4s;
}

.hamburgerMenu:hover {

    background: white;
    color: black;
    border-top-right-radius: 0;
}

.focusIsRoot {

    >.hamburgerMenu {
        opacity: 0;
        transform: scale(5);
        pointer-events: none;

    }

    >.aisleBackground {
        opacity: 0;
    }
}


svg {
    color: inherit;
    stroke: rgba(0, 0, 0, .5);
    fill: currentColor;
}






//--------


ul.overflow,
ul.Accordion,
ul:not(.body ul) {
    padding-inline-start: 0;
    padding-left: 0;
    list-style-type: none;
}




//--------

.Accordion.focusIsBackground.focusIsRoot .A {
    animation: scrollIn 2s ease-out 2s;
    animation-delay: calc(5s - 0.2s * var(--units));
    top: calc(var(--units) * var(--unit) + 90vh);
}


@keyframes scrollIn {
    0% {
        transform: translateX(calc(-300px * var(--units) - 800px));
        top: calc(var(--units) * var(--unit) + 10vh);

    }


    20% {
        transform: translateX(0px);
        top: calc(var(--units) * var(--unit) + 20vh);
    }

    60% {
        top: calc(var(--units) * var(--unit) * 1.02 + 20vh);
    }


    100% {
        top: calc(var(--units) * var(--unit) + 90vh);
    }
}