.info {
  pointer-events: none;
}
.multipleHeaders {
  overflow: hidden;
  width: 100%;
}

.multipleHeaders > :first-child {
  /* First header will always display full content and grow to fill headerspace */
  flex-shrink: 0;
  flex-grow: 1;
}

.multipleHeaders > :not(:first-child) {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.multipleHeaders h1 {
  text-overflow: ellipsis;
  overflow: hidden;
}

.opening {
  --accordionOffset: calc(50vw - (var(--width) / 2));
  margin-left: calc(0px - var(--accordionOffset) - var(--westWidth) - var(--nearWestWidth));
  width: 100vw;
  position: relative;
  min-height: 0px;
  margin-top: 3rem;
  overflow: hidden;
  opacity: 0.5;
  transition: all 0.5s;
  z-index: -4;
}

.A .opening {
  min-height: 3rem;
}

.F .opening {
  min-height: calc(var(--hereHeight) - var(--nearWestHeight));
  margin-top: -3rem;
  opacity: 1;
}

.segmentLabel {
  --border-color: #0ff;
  --border-color: transparent;
  text-shadow: 1px 1px 0px var(--border-color), -1px -1px 0px var(--border-color), -1px 1px 0px var(--border-color),
    1px -1px 0px var(--border-color);
}
.focusIsBackground .segmentLabel h1 {
  background: #4f8;
  color: #008;
  max-width: min-content;
}

.artist .weblink {
  display: block;
  margin-left: -7rem;
  border-bottom: 0.5px solid #8c8cfc;
  padding-left: 7rem;
  margin-top: 1.5rem;
  width: fit-content;
}

.richtext {
  /* padding: calc(var(--bleed) * 1); */
}

.A img.artist,
.F img.artist {
  mix-blend-mode: overlay;
  position: relative;
  left: 1rem;
  width: calc(100% - var(--bleed));
}

.fg {
  z-index: 9;
}

.F > a.segmentLabel:hover,
.A > a.segmentLabel:hover {
  background-image: linear-gradient(135deg, #8c8cff 25%, transparent 25%),
    linear-gradient(225deg, #8c8cff 25%, transparent 25%), linear-gradient(45deg, #8c8cff 25%, transparent 25%),
    linear-gradient(315deg, #8c8cff 25%, rgba(0, 0, 0, 0) 25%);
  background-position: 1.5rem 1.5rem, 1.5rem 1.5rem, 0 1.5rem, 0 1.5rem;
  background-size: 3rem 3rem;
  background-repeat: repeat;
}

.F > a,
.A > a {
  background-image: linear-gradient(135deg, transparent 25%, transparent 25%),
    linear-gradient(225deg, transparent 25%, transparent 25%), linear-gradient(45deg, transparent 25%, transparent 25%),
    linear-gradient(315deg, transparent 25%, rgba(0, 0, 0, 0) 25%);
  background-position: 1.5rem 1.5rem, 1.5rem 1.5rem, 0 1.5rem, 0 1.5rem;
  background-size: 1.5rem 1.5rem;
  background-repeat: repeat;
  transition: all 0.2s;
}

.Ba > a.segmentLabel:hover,
.B > a.segmentLabel:hover,
.P > a.segmentLabel:hover,
a.weblink:hover {
  background-image: linear-gradient(135deg, #000 25%, transparent 25%),
    linear-gradient(225deg, #000 25%, transparent 25%), linear-gradient(45deg, #000 25%, transparent 25%),
    linear-gradient(315deg, #000 25%, rgba(0, 0, 0, 0) 25%);
}

.Ba > a,
.B > a,
.P > a {
  transition: all 0.2s;
  background-image: linear-gradient(135deg, rgba(0, 0, 255, 0) 25%, transparent 25%),
    linear-gradient(225deg, rgba(0, 0, 255, 0) 25%, transparent 25%),
    linear-gradient(45deg, rgba(0, 0, 255, 0) 25%, transparent 25%),
    linear-gradient(315deg, rgba(0, 0, 255, 0) 25%, rgba(0, 0, 0, 0) 25%);
}
img {
  transform-origin: center;
  transform: translateZ(-0.08px);
}
.B > a {
  background: hsl(0, 0%, 10%);
  height: fit-content;
  outline: none;
  mix-blend-mode: lighten;
}
.P H1 {
  overflow: visible;
  white-space: nowrap;
}
.P {
  /* background: #4f8; */
  overflow: visible;
}
.P a.segmentLabel:link,
.P a.segmentLabel:visited,
.B a.segmentLabel:link,
.B a.segmentLabel:visited {
  color: #fff;
  background: white;
  color: black;
}
.F a.segmentLabel:link,
.F a.segmentLabel:visited {
  color: #ddd;
}
.A a.segmentLabel:link,
.A a.segmentLabel:visited,
.F a.segmentLabel:link,
.F a.segmentLabel:visited {
  color: #ccc;
  background: rgba(255, 255, 255, 0.1);
}

.A a.segmentLabel:hover,
.Ba a.segmentLabel:hover,
.F a.segmentLabel:hover,
.P a.segmentLabel:hover {
  background: rgba(255, 255, 255, 0.5);
}

.A.🁣 {
  overflow-y: hidden;
}
.Accordion > .peek > .body {
  transition: transform 0.2s;
}
.peek:hover > .body {
  transform: scale(1.05);
}
:not(.peek).illustration > .body {
  overflow: visible;
  width: calc(100% + 2 * var(--bleed));
  margin-left: calc(0px - var(--bleed));
  margin-top: calc(0px - var(--bleed));
}

.info {
  inline-size: 21rem;
}
.F .info,
.P .info {
  opacity: 1;
  pointer-events: auto;
}

.info {
  opacity: 0;
  padding: 0.75rem;
  padding-inline: 0.75rem;
  padding-block: 1.125rem;
  color: silver;
  transition: opacity 0.5s;
}

.info .toc li {
  display: inline-block;
}
.info .toc {
  margin: -0.75rem;
  margin-top: -1.5rem;
  display: block;
  background: white;
  padding: 0.5rem 1rem;
}
.P .info .toc li a {
  background: white;
  padding: 0.25rem;
}
.P .info .toc li a:hover {
  text-decoration: underline;
}
.P .info .toc li a:active {
  background: black;
}
/*
*  ==============================================================
*                  Segment widths and animations
*  ==============================================================
*/

/*                  ---------Animation---------
*/
.🀱,
.🁣 {
  position: absolute;
  transition: opacity 0.2s, height 0.5s, width 0.5s, left 0.2s, top 0.7s;
  outline-offset: -1.5px;
}
.cache {
  visibility: hidden;
  opacity: 0;
  transition: height 0.3s, width 0.3s, left 0.2s, top 0.7s, opacity 0.3s linear 0.2s, visibility 0s linear 0.5s;
}
.cache.🀱 {
  width: var(--unit);
}
.cache.🁣 {
  height: var(--unit);
}

/*                       ---------🀱---------
*/

.🀱 {
  height: var(--hereHeight);
}

/* slicey */
.west,
.east,
.🀱:not(.hasBody),
.focusIsBackground > .🀱 {
  width: var(--unit);
}
.west > .body,
.east > .body,
.focusIsBackground > .🀱:not(.F) > .body {
  visibility: hidden;
  max-height: 0rem;
}

/* expanded */
.🀱.nearWest.hasBody,
.🀱.nearEast.hasBody,
.🀱.here.hasBody {
  width: calc(var(--ownColumns) * var(--column) + var(--ownScreens) * var(--screen));
}

/*                       ---------🁣---------
*/

.🁣 {
  width: var(--column);
  height: var(--unit);
}

/* slicey */
.north,
.south,
.🁣.nearWest,
.🁣.nearEast,
.🁣:not(.hasBody),
.focusIsBackground > .🁣 {
  height: var(--unit);
}
.north > .body,
.south > .body,
.🁣.nearWest > .body,
.🁣.nearEast > .body,
.focusIsBackground > .🁣:not(.F) > .body {
  visibility: hidden;
  max-height: 0rem;
}

/* expanded */
.🁣.here.hasBody {
  width: calc(var(--ownColumns) * var(--column) + var(--ownScreens) * var(--screen));
  height: var(--hereHeight);
}

.richtext > h2 {
  font-family: space_monoregular;
  color: white;
  font-size: 1.2rem;
  position: relative;
  left: -2px;
  padding-right: 0;
  letter-spacing: -0.5px;
}
